<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - My Shop</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- We added the two lines below after importing the libraries bootstrap and jquery in order to use them -->
    <script src="~/lib/bootstrap/js/bootstrap.js"></script>
    <script src="~/lib/jquery/jquery.js"></script>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">My Shop</a>
                <!-- Above in asp-controller is a tag helper that specifies which controller should handle the request when "My Shop" is clicked
                     In this case it is the HomeController.cs class.
                     In ASP.NET Core MVC, the convention for controller naming is to use the format {ControllerName}Controller.cs,
                     where {ControllerName} is the name you want for your controller.
                     After that, we look through the action methods in the HomeController.cs class and we target the Index ActionMethod. -->
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <!-- When a user clicks the "Home" hyperlink, the framework generates a URL based on the provided asp-controller
                                and asp-action attributes.
                            This URL corresponds to the "Index" action method within the "HomeController" controller.
                            The framework then routes the request to the appropriate controller and action method, 
                            executing the logic and returning the view associated with the action.-->
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Item" asp-action="Table">Items</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Customer" asp-action="Table">Customers</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Order" asp-action="Table">Orders</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <!-- This is a general layout page template that will be used by various views in the application.-->
        <main role="main" class="pb-3">
            <!-- More specifically, it's the RenderBody() method that renders each unique View-->
            @RenderBody()
        </main>
    </div>
</body>
</html>

