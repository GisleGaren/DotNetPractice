{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../shared/convert-to-currency.pipe\";\nfunction ItemsComponent_tr_26_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelement(1, \"img\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", item_r1.ImageUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction ItemsComponent_tr_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 10);\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"convertToCurrency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, ItemsComponent_tr_26_td_10_Template, 2, 1, \"td\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r1.ItemId, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r1.Name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 5, item_r1.Price, \"kr.\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", item_r1.Description, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.displayImage);\n  }\n}\n// If we want to style our components, we can simply reference a css file.\n// OnInit is a lifecycle hook that is called after Angular has initialised all data-bound properties of\n// a directive. This hook is commonly used for tasks like initialization, setting up data, or making\n// API calls when the component is first created.\nexport class ItemsComponent {\n  constructor() {\n    this.viewTitle = 'Table';\n    this.displayImage = true;\n    // listFilter: string = \"\";\n    /* For now the content of the array item is any, because we don't care about the type. UPDATE, we have\r\n    now defined an interface that defines what attributes the IItem objects should have in item.ts which acts\r\n    as our model / class. */\n    // Create a private attribute so that we need getters and setters to access the attribute\n    this._listFilter = \"\";\n    this.items = [{\n      \"ItemId\": 1,\n      \"Name\": \"Pizza\",\n      \"Price\": 150,\n      \"Description\": \"Delicious Italian dish with a thin crust topped with tomato sauce, cheese, and various toppings.\",\n      \"ImageUrl\": \"assets/images/pizza.jpg\"\n    }, {\n      \"ItemId\": 2,\n      \"Name\": \"Fried Chicken Leg\",\n      \"Price\": 20,\n      \"Description\": \"Crispy and succulent chicken leg that is deep-fried to perfection, often served as a popular fast food item.\",\n      \"ImageUrl\": \"assets/images/chickenleg.jpg\"\n    }];\n  }\n  get listFilter() {\n    return this._listFilter;\n  }\n  set listFilter(value) {\n    this._listFilter = value;\n    console.log(\"In setter:\", value);\n  }\n  // Method that inverts the boolean displayImage\n  toggleImage() {\n    this.displayImage = !this.displayImage;\n  }\n  ngOnInit() {\n    console.log(\"ItemsComponent Created\");\n  }\n  static #_ = this.ɵfac = function ItemsComponent_Factory(t) {\n    return new (t || ItemsComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ItemsComponent,\n    selectors: [[\"app-items-component\"]],\n    decls: 27,\n    vars: 5,\n    consts: [[\"id\", \"tableLabel\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-4\"], [\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"], [1, \"col-md-6\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [\"width\", \"180\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"width\", \"120\"], [4, \"ngIf\"], [\"width\", \"80\", 3, \"src\"]],\n    template: function ItemsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2);\n        i0.ɵɵtext(4, \"Filter by:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function ItemsComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.listFilter = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 5)(9, \"h4\");\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"table\", 6)(12, \"thead\")(13, \"tr\")(14, \"th\");\n        i0.ɵɵtext(15, \"Item Id\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"th\");\n        i0.ɵɵtext(17, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"th\");\n        i0.ɵɵtext(19, \"Price\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"th\");\n        i0.ɵɵtext(21, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"th\", 7)(23, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function ItemsComponent_Template_button_click_23_listener() {\n          return ctx.toggleImage();\n        });\n        i0.ɵɵtext(24);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(25, \"tbody\");\n        i0.ɵɵtemplate(26, ItemsComponent_tr_26_Template, 11, 8, \"tr\", 9);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"List of Items (\", ctx.viewTitle, \" View)\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.listFilter);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"Filtered by: \", ctx.listFilter, \"\");\n        i0.ɵɵadvance(14);\n        i0.ɵɵtextInterpolate1(\" \", ctx.displayImage ? \"Hide\" : \"Show\", \" Image\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filteredItems);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.ConvertToCurrency],\n    styles: [\".table-striped[_ngcontent-%COMP%]    > thead[_ngcontent-%COMP%]    > tr[_ngcontent-%COMP%]    > th[_ngcontent-%COMP%] {\\r\\n  color: blue !important;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaXRlbXMvaXRlbXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHNCQUFzQjtBQUN4QiIsInNvdXJjZXNDb250ZW50IjpbIi50YWJsZS1zdHJpcGVkID4gdGhlYWQgPiB0ciA+IHRoIHtcclxuICBjb2xvcjogYmx1ZSAhaW1wb3J0YW50O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;IA8CMA,0BAAyB;IAAAA,0BAAsC;IAAAA,iBAAK;;;;IAAtCA,eAAmB;IAAnBA,wDAAmB;;;;;IAXnDA,0BAAuC;IAChCA,YAAkB;IAAAA,iBAAK;IAC5BA,0BAAI;IAACA,YAAgB;IAAAA,iBAAK;IAO1BA,8BAAgB;IAAAA,YAA2C;;IAAAA,iBAAK;IAChEA,0BAAI;IAACA,YAAuB;IAAAA,iBAAK;IACjCA,sEAAoE;IAXtEA,iBAAuC;;;;;IAChCA,eAAkB;IAAlBA,+CAAkB;IAClBA,eAAgB;IAAhBA,6CAAgB;IAOLA,eAA2C;IAA3CA,gEAA2C;IACtDA,eAAuB;IAAvBA,oDAAuB;IACvBA,eAAkB;IAAlBA,0CAAkB;;;AC3C7B;AAOE;AACA;AACA;AACF,OAAM,MAAOC,cAAc;EAT3BC;IAUE,cAAS,GAAW,OAAO;IAC3B,iBAAY,GAAY,IAAI;IAC5B;IACA;;;IAIA;IACQ,gBAAW,GAAW,EAAE;IAWhC,UAAK,GAAY,CACf;MACE,QAAQ,EAAE,CAAC;MACX,MAAM,EAAE,OAAO;MACf,OAAO,EAAE,GAAG;MACZ,aAAa,EAAE,kGAAkG;MACjH,UAAU,EAAE;KACb,EACD;MACE,QAAQ,EAAE,CAAC;MACX,MAAM,EAAE,mBAAmB;MAC3B,OAAO,EAAE,EAAE;MACX,aAAa,EAAE,8GAA8G;MAC7H,UAAU,EAAE;KACb,CACF;;EAxBD,IAAIC,UAAU;IACZ,OAAO,IAAI,CAACC,WAAW;EACzB;EAEA,IAAID,UAAU,CAACE,KAAa;IAC1B,IAAI,CAACD,WAAW,GAAGC,KAAK;IACxBC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,KAAK,CAAC;EAClC;EAmBA;EACAG,WAAW;IACT,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EACAC,QAAQ;IACNJ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC;EAAC;qBA3CUN,cAAc;EAAA;EAAA;UAAdA,cAAc;IAAAU;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDb3Bf,6BAAoB;QAAAA,YAAoC;QAAAA,iBAAK;QAE7DA,8BAAiB;QACOA,0BAAU;QAAAA,iBAAM;QACtCA,8BAAsB;QAICA;UAAA;QAAA,EAA0B;QAA7CA,iBAAgD;QAItDA,8BAAiB;QAILA,aAA6B;QAAAA,iBAAK;QAI9CA,iCAAgE;QAGtDA,wBAAO;QAAAA,iBAAK;QAChBA,2BAAI;QAAAA,qBAAI;QAAAA,iBAAK;QACbA,2BAAI;QAAAA,sBAAK;QAAAA,iBAAK;QACdA,2BAAI;QAAAA,4BAAW;QAAAA,iBAAK;QACpBA,8BAAgB;QAENA;UAAA,OAASgB,iBAAa;QAAA,EAAC;QAE7BhB,aAAyC;QAAAA,iBAAS;QAG1DA,8BAAO;QACLA,gEAAuC;QAY3CA,iBAAQ;;;QA/CYA,eAAoC;QAApCA,iEAAoC;QAQ/BA,eAA0B;QAA1BA,wCAA0B;QAQvCA,eAA6B;QAA7BA,0DAA6B;QAe/BA,gBAAyC;QAAzCA,wEAAyC;QAI1BA,eAAgB;QAAhBA,2CAAgB","names":["i0","ItemsComponent","constructor","listFilter","_listFilter","value","console","log","toggleImage","displayImage","ngOnInit","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\gisle\\Documents\\WebApp\\MyShop-2\\AngularPractice\\ClientApp\\src\\app\\items\\items.component.html","C:\\Users\\gisle\\Documents\\WebApp\\MyShop-2\\AngularPractice\\ClientApp\\src\\app\\items\\items.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">List of Items ({{ viewTitle }} View)</h1>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-md-2\">Filter by:</div>\r\n  <div class=\"col-md-4\">\r\n      <!-- Below we have implemented two-way binding using the ngModel directive.\r\n           two-way data binding allows us to synchronize the data between the HTML template\r\n           and the component's TypeScript code -->\r\n      <input type=\"text\" [(ngModel)] = \"listFilter\" />\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-md-6\">\r\n        <!-- At the same time with twoway binding, we type in an input string above, and then that same\r\n             string gets displayed down below to show us how two-way binding works! -->\r\n        <h4>Filtered by: {{ listFilter }}</h4>\r\n    </div>\r\n</div>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\">\r\n  <thead>\r\n    <tr>\r\n      <th>Item Id</th>\r\n      <th>Name</th>\r\n      <th>Price</th>\r\n      <th>Description</th>\r\n      <th width=\"180\">\r\n        <button class=\"btn btn-primary\"\r\n                (click)=\"toggleImage()\">\r\n        <!-- If displayImage boolean is true, the button will display \"Hide\", if false, it will display \"Show\"-->\r\n          {{ displayImage ? \"Hide\" : \"Show\"}} Image</button></th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor='let item of filteredItems'>\r\n      <td> {{ item.ItemId }} </td>\r\n      <td> {{ item.Name }} </td>\r\n      <!-- Remember transform(value: number, character: string): string {\r\n      return character + ' ' + value.toString(); ?\r\n      Here we take in the item.Price in the transform() method as first argument and we have the pipe\r\n      \"kr.\" string as the second argument. The returned value from the transform() method is \"kr. 150\"\r\n      because the return value returns first the string  \"kr.\" followed by \" \" space string and then\r\n      the toString of the item.Price. -->\r\n      <td width=\"120\">{{ item.Price | convertToCurrency: \"kr.\" }}</td>\r\n      <td> {{ item.Description }} </td>\r\n      <td *ngIf=\"displayImage\"><img [src]=item.ImageUrl width=\"80\" /></td>\r\n</tbody>\r\n</table>\r\n","import { Component, OnInit} from '@angular/core';\nimport { IItem } from \"./item\";\n\n// If we want to style our components, we can simply reference a css file.\n@Component({\n  selector: 'app-items-component',\n  templateUrl: './items.component.html',\n  styleUrls: [\"./items.component.css\"]\n})\n\n  // OnInit is a lifecycle hook that is called after Angular has initialised all data-bound properties of\n  // a directive. This hook is commonly used for tasks like initialization, setting up data, or making\n  // API calls when the component is first created.\nexport class ItemsComponent implements OnInit {\n  viewTitle: string = 'Table';\n  displayImage: boolean = true;\n  // listFilter: string = \"\";\n  /* For now the content of the array item is any, because we don't care about the type. UPDATE, we have\n  now defined an interface that defines what attributes the IItem objects should have in item.ts which acts\n  as our model / class. */\n\n  // Create a private attribute so that we need getters and setters to access the attribute\n  private _listFilter: string = \"\";\n\n  get listFilter(): string {\n    return this._listFilter;\r\n  }\n\n  set listFilter(value: string) {\n    this._listFilter = value;\r\n    console.log(\"In setter:\", value);\r\n  }\n\n  items: IItem[] = [\n    {\n      \"ItemId\": 1,\n      \"Name\": \"Pizza\",\n      \"Price\": 150,\n      \"Description\": \"Delicious Italian dish with a thin crust topped with tomato sauce, cheese, and various toppings.\",\n      \"ImageUrl\": \"assets/images/pizza.jpg\"\n    },\n    {\n      \"ItemId\": 2,\n      \"Name\": \"Fried Chicken Leg\",\n      \"Price\": 20,\n      \"Description\": \"Crispy and succulent chicken leg that is deep-fried to perfection, often served as a popular fast food item.\",\n      \"ImageUrl\": \"assets/images/chickenleg.jpg\"\n    }\r\n  ];\n\n  // Method that inverts the boolean displayImage\n  toggleImage(): void {\n    this.displayImage = !this.displayImage;\r\n  }\n  ngOnInit(): void {\n    console.log(\"ItemsComponent Created\")\r\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}